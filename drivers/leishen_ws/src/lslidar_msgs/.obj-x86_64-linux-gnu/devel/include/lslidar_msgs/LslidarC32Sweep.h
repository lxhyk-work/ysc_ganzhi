// Generated by gencpp from file lslidar_msgs/LslidarC32Sweep.msg
// DO NOT EDIT!


#ifndef LSLIDAR_MSGS_MESSAGE_LSLIDARC32SWEEP_H
#define LSLIDAR_MSGS_MESSAGE_LSLIDARC32SWEEP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <lslidar_msgs/LslidarScan.h>

namespace lslidar_msgs
{
template <class ContainerAllocator>
struct LslidarC32Sweep_
{
  typedef LslidarC32Sweep_<ContainerAllocator> Type;

  LslidarC32Sweep_()
    : header()
    , scans()  {
    }
  LslidarC32Sweep_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , scans()  {
  (void)_alloc;
      scans.assign( ::lslidar_msgs::LslidarScan_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array< ::lslidar_msgs::LslidarScan_<ContainerAllocator> , 32>  _scans_type;
  _scans_type scans;





  typedef boost::shared_ptr< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> const> ConstPtr;

}; // struct LslidarC32Sweep_

typedef ::lslidar_msgs::LslidarC32Sweep_<std::allocator<void> > LslidarC32Sweep;

typedef boost::shared_ptr< ::lslidar_msgs::LslidarC32Sweep > LslidarC32SweepPtr;
typedef boost::shared_ptr< ::lslidar_msgs::LslidarC32Sweep const> LslidarC32SweepConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator1> & lhs, const ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.scans == rhs.scans;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator1> & lhs, const ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lslidar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80a015e824c3342168ab462a26096e1b";
  }

  static const char* value(const ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80a015e824c33421ULL;
  static const uint64_t static_value2 = 0x68ab462a26096e1bULL;
};

template<class ContainerAllocator>
struct DataType< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lslidar_msgs/LslidarC32Sweep";
  }

  static const char* value(const ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# The 0th scan is at the bottom\n"
"LslidarScan[32] scans\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: lslidar_msgs/LslidarScan\n"
"# Altitude of all the points within this scan\n"
"float64 altitude\n"
"\n"
"# The valid points in this scan sorted by azimuth\n"
"# from 0 to 359.99\n"
"LslidarPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: lslidar_msgs/LslidarPoint\n"
"# Time when the point is captured\n"
"float64 time\n"
"\n"
"# Converted distance in the sensor frame\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"# Raw measurement from Leishen C16\n"
"float64 azimuth\n"
"float64 distance\n"
"float64 intensity\n"
"uint16 ring\n"
"\n"
;
  }

  static const char* value(const ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.scans);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LslidarC32Sweep_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lslidar_msgs::LslidarC32Sweep_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "scans[]" << std::endl;
    for (size_t i = 0; i < v.scans.size(); ++i)
    {
      s << indent << "  scans[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lslidar_msgs::LslidarScan_<ContainerAllocator> >::stream(s, indent + "    ", v.scans[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LSLIDAR_MSGS_MESSAGE_LSLIDARC32SWEEP_H
