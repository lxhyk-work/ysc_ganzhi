// Generated by gencpp from file lslidar_msgs/lslidar_controlRequest.msg
// DO NOT EDIT!


#ifndef LSLIDAR_MSGS_MESSAGE_LSLIDAR_CONTROLREQUEST_H
#define LSLIDAR_MSGS_MESSAGE_LSLIDAR_CONTROLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lslidar_msgs
{
template <class ContainerAllocator>
struct lslidar_controlRequest_
{
  typedef lslidar_controlRequest_<ContainerAllocator> Type;

  lslidar_controlRequest_()
    : LaserControl(0)  {
    }
  lslidar_controlRequest_(const ContainerAllocator& _alloc)
    : LaserControl(0)  {
  (void)_alloc;
    }



   typedef int32_t _LaserControl_type;
  _LaserControl_type LaserControl;





  typedef boost::shared_ptr< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct lslidar_controlRequest_

typedef ::lslidar_msgs::lslidar_controlRequest_<std::allocator<void> > lslidar_controlRequest;

typedef boost::shared_ptr< ::lslidar_msgs::lslidar_controlRequest > lslidar_controlRequestPtr;
typedef boost::shared_ptr< ::lslidar_msgs::lslidar_controlRequest const> lslidar_controlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator1> & lhs, const ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.LaserControl == rhs.LaserControl;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator1> & lhs, const ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lslidar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "092ff9dfd0fc90557976e746314fce5a";
  }

  static const char* value(const ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x092ff9dfd0fc9055ULL;
  static const uint64_t static_value2 = 0x7976e746314fce5aULL;
};

template<class ContainerAllocator>
struct DataType< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lslidar_msgs/lslidar_controlRequest";
  }

  static const char* value(const ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 LaserControl\n"
;
  }

  static const char* value(const ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.LaserControl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lslidar_controlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lslidar_msgs::lslidar_controlRequest_<ContainerAllocator>& v)
  {
    s << indent << "LaserControl: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LaserControl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LSLIDAR_MSGS_MESSAGE_LSLIDAR_CONTROLREQUEST_H
